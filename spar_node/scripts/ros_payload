#!/usr/bin/env python3
import rospy
#import RPi.GPIO as GPIO
#from gpiozero import AngularServo
#from time import sleep
from std_msgs.msg import Bool

sub_a = None
sub_b = None

#servo_a = AngularServo(18, min_pulse_width = 0.0006, max_pulse_width=0.0023)
#servo_b = AngularServo(23, min_pulse_width = 0.0006, max_pulse_width=0.0023)

##chan_list = [18,23] # Set the channels you want to use (see RPi.GPIO docs!)

def callback_a(msg_in):
	# A bool message contains one field called "data" which can be true or false
	# http://docs.ros.org/melodic/api/std_msgs/html/msg/Bool.html
	# XXX: The following "GPIO.output" should be replaced to meet the needs of your actuators!
	if msg_in.data:
		rospy.loginfo("Setting output high!")
		#servo_a.angle = 90
		#sleep(2)
		#servo_a.angle = -90
		#GPIO.output(chan_list, GPIO.HIGH)
		
	else:
		rospy.loginfo("Setting output low!")
		#GPIO.output(chan_list, GPIO.LOW)

def callback_b(msg_in):
	if msg_in.data:
		rospy.loginfo("Setting output high!")
		##GPIO.output(chan_list, GPIO.HIGH)
		#servo_b.angle = 90
		#sleep(2)
		#servo_b.angle = -90
	else:
		rospy.loginfo("Setting output low!")
		#GPIO.output(chan_list, GPIO.LOW)

def shutdown():
	# Clean up our ROS subscriber if they were set, avoids error messages in logs
	if sub is not None:
		sub_a.unregister()

	# XXX: Could perform some failsafe actions here!
	#servo_a.angle = -90
	#servo_b.angle = -90

	# Close down our GPIO
	##GPIO.cleanup()

if __name__ == '__main__':
	# Setup the ROS backend for this node
	rospy.init_node('actuator_controller', anonymous=True)

	# Setup the GPIO
    #GPIO.setup(chan_list, GPIO.OUT)

	# Setup the publisher for a single actuator (use additional subscribers for extra actuators)
	sub_a = rospy.Subscriber('/guidance/actuator_control/actuator_a', Bool, callback_a)
	sub_b = rospy.Subscriber('/guidance/actuator_control/actuator_b', Bool, callback_b)

	# Make sure we clean up all our code before exiting
	rospy.on_shutdown(shutdown)

	# Loop forever
	rospy.spin()

###
# rostopic pub/topic_name std_msgs/string hello
# rostopic pub/actuator_control/actuator_a std_msgs/Bool True
# rostopic pub/actuator_control/actuator_b std_msgs/Bool True

	